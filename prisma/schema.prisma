generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerifyList {
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId])
  @@index([userId])
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  password        String
  role            Role              @default(USER)
  name            String?           @unique(sort: Asc)
  image           String?
  banner          String?
  color           Json?
  verified        Boolean           @default(false)
  emailVerified   DateTime?
  followToId      String?
  isBanned        Boolean           @default(false)
  muteExpires     DateTime?
  createdAt       DateTime          @default(now())
  subForum        SubForum[]
  subscription    Subscription[]
  post            Post[]
  comment         Comment[]
  commentVote     CommentVote[]
  manga           Manga[]
  memberOnTeam    MemberOnTeam?
  messages        Message[]
  notifySent      Notify[]          @relation("fromUser")
  notifications   Notify[]          @relation("toUser")
  owner           Team?
  followTo        User?             @relation("followTo", fields: [followToId], references: [id])
  follows         User[]            @relation("followTo")
  badge           Badge[]           @relation("BadgeToUser")
  conversation    Conversation[]    @relation("ConversationToUser")
  history         History[]
  mangaFollow     MangaFollow[]
  isWaitVeify     VerifyList?
  session         Session[]
  teamJoinRequest TeamJoinRequest?
  postComment     PostComment[]
  postVote        PostVote[]
  postCommentVote PostCommentVote[]
  account         Account[]
  discordChannel  DiscordChannel?

  @@index([followToId])
  @@index([email], type: Hash)
  @@index([name])
}

model Badge {
  id          Int    @id @default(autoincrement())
  image       String
  name        String
  color       Json
  description String
  user        User[] @relation("BadgeToUser")
}

model Notify {
  id         Int        @id @default(autoincrement())
  type       NotifyType
  fromUserId String
  toUserId   String
  content    Json
  isRead     Boolean    @default(false)
  createdAt  DateTime   @default(now())
  fromUser   User       @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User       @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
}

// Team

model MemberOnTeam {
  userId String @unique
  teamId Int
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model TeamJoinRequest {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  teamId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId])
}

model Team {
  id              Int               @id @default(autoincrement())
  image           String
  name            String            @unique
  description     String
  ownerId         String            @unique
  createdAt       DateTime          @default(now())
  chapter         Chapter[]
  member          MemberOnTeam[]
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  teamJoinRequest TeamJoinRequest[]

  @@index([ownerId])
}

// Manga

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  category    String
  manga       Manga[] @relation("MangaToTag")
}

model Manga {
  id           Int           @id @default(autoincrement())
  name         String
  image        String
  description  Json
  review       String
  altName      String?
  facebookLink String?
  discordLink  String?
  creatorId    String
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chapter      Chapter[]
  comment      Comment[]
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  view         View?
  author       MangaAuthor[] @relation("MangaToMangaAuthor")
  tags         Tag[]         @relation("MangaToTag")
  history      History[]
  mangaFollow  MangaFollow[]

  @@unique([name, creatorId])
  @@index([creatorId])
  @@index([isPublished], type: Hash)
}

model MangaFollow {
  mangaId Int
  userId  String
  manga   Manga  @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mangaId, userId])
  @@index([mangaId, userId])
}

model MangaAuthor {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  manga Manga[] @relation("MangaToMangaAuthor")

  @@index([name])
}

model Chapter {
  id           Int          @id @default(autoincrement())
  chapterIndex Float        @default(1)
  name         String?
  images       String[]
  volume       Int
  mangaId      Int
  teamId       Int?
  isPublished  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  manga        Manga        @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id])
  comment      Comment[]
  dailyView    DailyView[]
  weeklyView   WeeklyView[]

  @@index([mangaId])
  @@index([teamId])
  @@index([isPublished], type: Hash)
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   Json
  oEmbed    Json?
  authorId  String
  mangaId   Int
  chapterId Int?
  replyToId Int?
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapter   Chapter?      @relation(fields: [chapterId], references: [id])
  manga     Manga         @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  @@index([authorId])
  @@index([chapterId])
  @@index([mangaId])
  @@index([replyToId])
}

model CommentVote {
  userId    String
  commentId Int
  type      VoteType
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@index([userId, commentId])
  @@index([commentId])
}

model View {
  mangaId    Int          @id
  totalView  Int
  dailyView  DailyView[]
  manga      Manga        @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  weeklyView WeeklyView[]

  @@index([mangaId])
}

model DailyView {
  id        Int      @id @default(autoincrement())
  mangaId   Int
  chapterId Int
  createdAt DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  view      View     @relation(fields: [mangaId], references: [mangaId], onDelete: Cascade)

  @@index([mangaId])
  @@index([chapterId])
}

model WeeklyView {
  id        Int      @id @default(autoincrement())
  mangaId   Int
  chapterId Int
  createdAt DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  view      View     @relation(fields: [mangaId], references: [mangaId])

  @@index([mangaId])
  @@index([chapterId])
}

model History {
  id        Int      @id @default(autoincrement())
  userId    String
  mangaId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga     Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@unique([userId, mangaId])
  @@index([userId])
  @@index([mangaId])
}

model DiscordChannel {
  userId      String  @unique
  channelId   String
  channelName String
  roleId      String?
  roleName    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Chat

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  messages  Message[]
  users     User[]    @relation("ConversationToUser")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  conversationId Int
  senderId       String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

// Manage

model Log {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
}

// Forum

model SubForum {
  id            Int            @id @default(autoincrement())
  title         String         @unique
  banner        String?
  canSend       Boolean        @default(true)
  creatorId     String
  createdAt     DateTime       @default(now())
  posts         Post[]
  subscriptions Subscription[]

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([title])
}

model Subscription {
  userId     String
  subForumId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subForum SubForum @relation(fields: [subForumId], references: [id], onDelete: Cascade)

  @@id([userId, subForumId])
}

model Post {
  id         Int           @id @default(autoincrement())
  subForumId Int
  title      String
  content    Json
  authorId   String
  comments   PostComment[]
  votes      PostVote[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  subForum SubForum @relation(fields: [subForumId], references: [id], onDelete: Cascade)
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([subForumId])
  @@index([authorId])
}

model PostComment {
  id        Int               @id @default(autoincrement())
  content   Json
  oEmbed    Json?
  createdAt DateTime          @default(now())
  postId    Int
  creatorId String
  replyToId Int?
  votes     PostCommentVote[]
  replies   PostComment[]     @relation("ReplyToPost")

  post    Post         @relation(fields: [postId], references: [id])
  creator User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  replyTo PostComment? @relation("ReplyToPost", fields: [replyToId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([creatorId])
  @@index([replyToId])
}

model PostVote {
  userId String
  postId Int
  type   VoteType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId, postId])
  @@index([userId])
}

model PostCommentVote {
  userId        String
  postCommentId Int
  type          VoteType

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  postComment PostComment @relation(fields: [postCommentId], references: [id], onDelete: Cascade)

  @@id([userId, postCommentId])
  @@index([userId, postCommentId])
  @@index([userId])
}

enum VoteType {
  UP_VOTE
  DOWN_VOTE
}

enum NotifyType {
  LIKE
  COMMENT
  MENTION
  FOLLOW
  SYSTEM
}

enum Role {
  ADMIN
  MOD
  USER
}
